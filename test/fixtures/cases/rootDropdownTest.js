const test = {
  it: 'create diagram for test (): test for dropdown as root',
  args: [
    {
      svgGroup_: { id: '' },
      svgPath_: { id: '' },
      rendered: true,
      useDragSurface_: true,
      id: 'EP25ropx|eg(J@*y5%WF',
      outputConnection: {},
      nextConnection: null,
      previousConnection: null,
      inputList: [
        {
          type: 5,
          name: '',
          sourceBlock_: { id: 'EP25ropx|eg(J@*y5%WF' },
          connection: null,
          fieldRow: [
            {
              size_: {},
              validator_: null,
              defaultVariableName: 'message1',
              defaultType_: 'broadcast_msg',
              variableTypes: {},
              argType_: {},
              value_: 'f,75I=B@h`g;+J==?,dq',
              sourceBlock_: { id: 'EP25ropx|eg(J@*y5%WF' },
              name: 'BROADCAST_OPTION',
              variable_: {},
              text_: 'message1',
              arrowSize_: 12,
              arrowX_: 83.828125,
              arrowY_: 11,
              arrow_: { id: '' },
              className_: 'blocklyText blocklyDropdownText',
              fieldGroup_: { id: '' },
              textElement_: { id: '' },
              arrowWidth_: 20,
              mouseDownWrapper_: {},
              renderWidth: 99.828125,
              renderSep: 0,
            },
          ],
          outlinePath: null,
          renderHeight: 32,
          renderWidth: 0,
          fieldWidth: 99.828125,
        },
      ],
      inputsInline: true,
      disabled: false,
      tooltip: '',
      contextMenu: true,
      parentBlock_: {
        svgGroup_: { id: '' },
        svgPath_: { id: '' },
        rendered: true,
        useDragSurface_: true,
        id: 'u6dvZQwRE%jj}K(%e(z]',
        outputConnection: null,
        nextConnection: {},
        previousConnection: {},
        inputList: [
          {
            type: 1,
            name: 'BROADCAST_INPUT',
            sourceBlock_: { id: 'u6dvZQwRE%jj}K(%e(z]' },
            connection: {
              sourceBlock_: { id: 'u6dvZQwRE%jj}K(%e(z]' },
              type: 1,
              db_: {},
              dbOpposite_: {},
              hidden_: false,
              offsetInBlock_: {},
              shadowDom_: { id: 'event_broadcast_menu' },
              targetConnection: {
                sourceBlock_: { id: 'EP25ropx|eg(J@*y5%WF' },
                type: 2,
                db_: {},
                dbOpposite_: {},
                hidden_: false,
                offsetInBlock_: {},
                check_: {},
                targetConnection: {},
                x_: 179.74710648148147,
                y_: 1601.5134612896081,
                inDB_: true,
              },
              x_: 179.74710648148147,
              y_: 1601.5134612896081,
              inDB_: true,
            },
            fieldRow: [
              {
                size_: {},
                text_: 'broadcast',
                sourceBlock_: { id: 'u6dvZQwRE%jj}K(%e(z]' },
                textElement_: { id: '' },
                arrowWidth_: 0,
                renderWidth: 70.265625,
                renderSep: 0,
              },
            ],
            outlinePath: { id: '' },
            renderHeight: 48,
            renderWidth: 115.828125,
            fieldWidth: 70.265625,
          },
        ],
        inputsInline: true,
        disabled: false,
        tooltip: '',
        contextMenu: true,
        parentBlock_: null,
        childBlocks_: {},
        deletable_: true,
        movable_: true,
        editable_: true,
        isShadow_: false,
        collapsed_: false,
        checkboxInFlyout_: false,
        comment: null,
        outputShape_: null,
        category_: 'events',
        xy_: {},
        workspace: { id: '50},9HT,|=$23`5dEuiR' },
        isInFlyout: false,
        isInMutator: false,
        RTL: false,
        isInsertionMarker_: false,
        type: 'event_broadcast',
        colour_: '#FFBF00',
        colourSecondary_: '#E6AC00',
        colourTertiary_: '#CC9900',
        inputsInlineDefault: true,
        eventsInit_: true,
        startHat_: false,
        squareTopLeftCorner_: false,
        edgeShapeWidth_: 0,
        edgeShape_: null,
        width: 210.09375,
        height: 56,
      },
      childBlocks_: {},
      deletable_: true,
      movable_: true,
      editable_: true,
      isShadow_: true,
      collapsed_: false,
      checkboxInFlyout_: false,
      comment: null,
      outputShape_: 2,
      category_: null,
      xy_: {},
      workspace: { id: '50},9HT,|=$23`5dEuiR' },
      isInFlyout: false,
      isInMutator: false,
      RTL: false,
      isInsertionMarker_: false,
      type: 'event_broadcast_menu',
      colour_: '#E6AC00',
      colourSecondary_: '#E6AC00',
      colourTertiary_: '#CC9900',
      inputsInlineDefault: true,
      eventsInit_: true,
      startHat_: false,
      squareTopLeftCorner_: true,
      edgeShapeWidth_: 16,
      edgeShape_: 2,
      width: 115.828125,
      height: 32,
    },
    {
      topBlock: 'EP25ropx|eg(J@*y5%WF',
      stack: {},
      stackFrames: {},
      status: 4,
      isKilled: false,
      target: { id: '8ytl}PP_?_}Ek+V6qMm!' },
      blockContainer: {
        _cache: {
          _executeCached: {
            'EP25ropx|eg(J@*y5%WF': {
              id: 'EP25ropx|eg(J@*y5%WF',
              opcode: 'event_broadcast_menu',
              fields: {},
              inputs: {},
              _profiler: null,
              _profilerFrame: null,
              _isHat: false,
              _definedBlockFunction: false,
              _isShadowBlock: true,
              _shadowValue: 'message1',
              _fields: {},
              _inputs: {},
              _argValues: {},
              _parentKey: null,
              _parentValues: null,
              _ops: {},
            },
          },
        },
      },
      requestScriptGlowInFrame: false,
      blockGlowInFrame: 'EP25ropx|eg(J@*y5%WF',
      warpTimer: null,
      justReported: null,
      stackClick: false,
      updateMonitor: false,
    },
  ],
  expected: {
    nodes: [
      {
        nodePlug: { valA: 0, valB: 0 },
        content: [{ content: 'message1' }],
        type: 'String',
        value: '"message1"',
      },
    ],
    edges: [],
    root: {
      nodePlug: { valA: 0, valB: 0 },
      content: [{ content: 'message1' }],
      type: 'String',
      value: '"message1"',
    },
  },
};

export default test;
