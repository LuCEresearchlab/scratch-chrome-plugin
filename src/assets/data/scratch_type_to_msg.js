export const connectorPlaceholder = '{{c}}';
export const variablePlaceholder = '{{v}}';
export const listPlaceholder = '{{l}}';
export const shadowPlaceholder = '{{s}}';
export const argumentPlaceholder = '{{a}}';

const typeToMsg = {
  motion_direction: ['direction'],
  motion_xposition: ['x position'],
  motion_yposition: ['y position'],
  looks_costumenumbername: ['costume name', 'costume number'],
  looks_backdropnumbername: ['backdrop name', 'backdrop number'],
  looks_size: ['size'],
  sound_volume: ['volume'],
  sensing_answer: ['answer'],
  sensing_username: ['username'],
  sensing_touchingobject: [`touching ${connectorPlaceholder}?`],
  sensing_touchingcolor: [`touching color ${connectorPlaceholder}?`],
  sensing_timer: ['timer'],
  sensing_of: [
    'background #',
    'backdrop #',
    'backdrop name',
    'volume',
    'x position',
    'y position',
    'direction',
    'costume #',
    'costume name',
    'size',
    variablePlaceholder,
  ].map((s) => `${s} of ${connectorPlaceholder}`),
  sensing_mousex: ['mouse x'],
  sensing_mousey: ['mouse y'],
  sensing_mousedown: 'mouse down?',
  sensing_loudness: 'loudness',
  sensing_keypressed: `key ${connectorPlaceholder} pressed?`,
  sensing_distanceto: `distance to ${connectorPlaceholder}`,
  sensing_dayssince2000: 'days since 2000',
  sensing_current: [
    'year',
    'month',
    'date',
    'day of week',
    'hour',
    'minute',
    'second',
  ].map((s) => `current ${s}`),
  sensing_coloristouchingcolor: `color ${connectorPlaceholder} is touching ${connectorPlaceholder}?`,
  operator_mathop: [
    'abs',
    'floor',
    'ceiling',
    'sqrt',
    'sin',
    'cos',
    'tan',
    'asin',
    'acos',
    'atan',
    'ln',
    'log',
    'e ^',
    '10 ^',
  ].map((s) => `${s} of ${connectorPlaceholder}`),
  operator_round: `round ${connectorPlaceholder}`,
  operator_add: `${connectorPlaceholder} + ${connectorPlaceholder}`,
  operator_subtract: `${connectorPlaceholder} - ${connectorPlaceholder}`,
  operator_divide: `${connectorPlaceholder} / ${connectorPlaceholder}`,
  operator_multiply: `${connectorPlaceholder} * ${connectorPlaceholder}`,
  operator_mod: `${connectorPlaceholder} mod ${connectorPlaceholder}`,
  operator_random: `pick random ${connectorPlaceholder} to ${connectorPlaceholder}`,
  operator_gt: `${connectorPlaceholder} > ${connectorPlaceholder}`,
  operator_lt: `${connectorPlaceholder} < ${connectorPlaceholder}`,
  operator_equals: `${connectorPlaceholder} = ${connectorPlaceholder}`,
  operator_and: `${connectorPlaceholder} and ${connectorPlaceholder}`,
  operator_or: `${connectorPlaceholder} or ${connectorPlaceholder}`,
  operator_not: `not ${connectorPlaceholder}`,
  operator_join: `join ${connectorPlaceholder} ${connectorPlaceholder}`,
  operator_letter_of: `letter ${connectorPlaceholder} of ${connectorPlaceholder}`,
  operator_length: `length of ${connectorPlaceholder}`,
  operator_contains: `${connectorPlaceholder} contains ${connectorPlaceholder}?`,
  data_variable: variablePlaceholder,
  data_listcontents: listPlaceholder,
  data_listcontainsitem: `${listPlaceholder} contains ${connectorPlaceholder}?`,
  data_lengthoflist: `length of ${listPlaceholder}`,
  data_itemoflist: `item ${connectorPlaceholder} of ${listPlaceholder}`,
  data_itemnumoflist: `item # of ${connectorPlaceholder} of ${listPlaceholder}`,
  music_getTempo: 'tempo',
  videoSensing_videoOn: `video ${connectorPlaceholder} on ${connectorPlaceholder}`,
  translate_getTranslate: `translate ${connectorPlaceholder} to ${connectorPlaceholder}`,
  translate_getViewerLanguage: 'language',
  microbit_isTilted: `tilted ${connectorPlaceholder}?`,
  microbit_isButtonPressed: `${connectorPlaceholder} button pressed?`,
  microbit_getTiltAngle: `tilt angle ${connectorPlaceholder}`,
  ev3_getMotorPosition: `motor ${connectorPlaceholder} position`,
  ev3_getDistance: 'distance',
  ev3_getBrightness: 'brightness',
  ev3_buttonPressed: `button ${connectorPlaceholder} pressed?`,
  boost_getMotorPosition: `motor ${connectorPlaceholder} position`,
  boost_getTiltAngle: `tile angle ${connectorPlaceholder}`,
  boost_seeingColor: `seeing ${connectorPlaceholder} brick?`,
  wedo2_getDistance: 'distance',
  wedo2_isTilted: `tilted ${connectorPlaceholder}?`,
  wedo2_getTiltAngle: `tilt angle ${connectorPlaceholder}`,
  gdxfor_getAcceleration: `acceleration ${connectorPlaceholder}`,
  gdxfor_isTilted: `tilted ${connectorPlaceholder}?`,
  gdxfor_getTilt: `tilt angle ${connectorPlaceholder}`,
  gdxfor_getSpinSpeed: `spin speed ${connectorPlaceholder}`,
  gdxfor_getForce: 'force',
  gdxfor_isFreeFalling: 'falling?',
  // shadows
  event_broadcast_menu: shadowPlaceholder,
  looks_backdrops: shadowPlaceholder,
  looks_costume: shadowPlaceholder,
  math_angle: shadowPlaceholder,
  math_integer: shadowPlaceholder,
  math_number: shadowPlaceholder,
  motion_glideto_menu: shadowPlaceholder,
  motion_goto_menu: shadowPlaceholder,
  motion_pointtowards_menu: shadowPlaceholder,
  sound_sounds_menu: shadowPlaceholder,
  text: shadowPlaceholder,
  colour_picker: shadowPlaceholder,
  control_create_clone_of_menu: shadowPlaceholder,
  math_positive_number: shadowPlaceholder,
  math_whole_number: shadowPlaceholder,
  sensing_distancetomenu: shadowPlaceholder,
  sensing_keyoptions: shadowPlaceholder,
  sensing_of_object_menu: shadowPlaceholder,
  sensing_touchingobjectmenu: shadowPlaceholder,
  music_menu_DRUM: shadowPlaceholder,
  music_menu_INSTRUMENT: shadowPlaceholder,
  note: shadowPlaceholder,
  pen_menu_colorParam: shadowPlaceholder,
  text2speech_menu_languages: shadowPlaceholder,
  text2speech_menu_voices: shadowPlaceholder,
  videoSensing_menu_ATTRIBUTE: shadowPlaceholder,
  videoSensing_menu_SUBJECT: shadowPlaceholder,
  videoSensing_menu_VIDEO_STATE: shadowPlaceholder,
  boost_menu_COLOR: shadowPlaceholder,
  boost_menu_MOTOR_DIRECTION: shadowPlaceholder,
  boost_menu_MOTOR_ID: shadowPlaceholder,
  boost_menu_MOTOR_REPORTER_ID: shadowPlaceholder,
  boost_menu_TILT_DIRECTION: shadowPlaceholder,
  boost_menu_TILT_DIRECTION_ANY: shadowPlaceholder,
  ev3_menu_sensorPorts: shadowPlaceholder,
  ev3_menu_motorPorts: shadowPlaceholder,
  gdxfor_menu_axisOptions: shadowPlaceholder,
  gdxfor_menu_gestureOptions: shadowPlaceholder,
  gdxfor_menu_pushPullOptions: shadowPlaceholder,
  gdxfor_menu_tiltAnyOptions: shadowPlaceholder,
  gdxfor_menu_tiltOptions: shadowPlaceholder,
  makeymakey_menu_KEY: shadowPlaceholder,
  makeymakey_menu_SEQUENCE: shadowPlaceholder,
  matrix: shadowPlaceholder,
  microbit_menu_buttons: shadowPlaceholder,
  microbit_menu_gestures: shadowPlaceholder,
  microbit_menu_tiltDirection: shadowPlaceholder,
  microbit_menu_tiltDirectionAny: shadowPlaceholder,
  microbit_menu_touchPins: shadowPlaceholder,
  translate_menu_languages: shadowPlaceholder,
  wedo2_menu_MOTOR_DIRECTION: shadowPlaceholder,
  wedo2_menu_MOTOR_ID: shadowPlaceholder,
  wedo2_menu_OP: shadowPlaceholder,
  wedo2_menu_TILT_DIRECTION: shadowPlaceholder,
  wedo2_menu_TILT_DIRECTION_ANY: shadowPlaceholder,
  // pseudo-shadows (sometimes not shadow)
  argument_reporter_string_number: [argumentPlaceholder, shadowPlaceholder],
  argument_reporter_boolean: [argumentPlaceholder, shadowPlaceholder],
};

export default typeToMsg;
